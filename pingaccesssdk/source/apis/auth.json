{
    "apiVersion": "7.1.3.0",
    "apis": [
        {
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteBasicAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Resets the HTTP Basic Authentication configuration to default values",
                    "type": "void"
                },
                {
                    "method": "GET",
                    "nickname": "getBasicAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the HTTP Basic Authentication configuration",
                    "type": "BasicConfig"
                },
                {
                    "method": "PUT",
                    "nickname": "updateBasicAuthCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Basic configuration to update",
                            "name": "BasicConfig",
                            "paramType": "body",
                            "required": true,
                            "type": "BasicAuthConfigView"
                        }
                    ],
                    "summary": "Update the Basic Authentication configuration",
                    "type": "BasicAuthConfigView"
                }
            ],
            "path": "/auth/basic"
        },
        {
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteOAuthAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Resets the OAuth Authentication configuration to default values",
                    "type": "void"
                },
                {
                    "method": "GET",
                    "nickname": "getOAuthAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the OAuth Authentication configuration",
                    "type": "OAuthConfigView"
                },
                {
                    "method": "PUT",
                    "nickname": "updateOAuthAuthCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "OAuth configuration to update",
                            "name": "OAuthConfig",
                            "paramType": "body",
                            "required": true,
                            "type": "OAuthConfigView"
                        }
                    ],
                    "summary": "Update the OAuth Authentication configuration",
                    "type": "OAuthConfigView"
                }
            ],
            "path": "/auth/oauth"
        },
        {
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteOidcAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Resets the OIDC Authentication configuration to default values",
                    "type": "void"
                },
                {
                    "method": "GET",
                    "nickname": "getOidcAuthCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the OIDC Authentication configuration",
                    "type": "OidcConfigView"
                },
                {
                    "method": "PUT",
                    "nickname": "updateOidcAuthCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "OIDC configuration to update",
                            "name": "OidcConfig",
                            "paramType": "body",
                            "required": true,
                            "type": "OidcConfigView"
                        }
                    ],
                    "summary": "Update the OIDC Authentication configuration",
                    "type": "OidcConfigView"
                }
            ],
            "path": "/auth/oidc"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getAuthOidcScopesCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of a specific client to retrieve supported scopes for",
                            "name": "clientId",
                            "paramType": "query",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "summary": "Get the scopes supported by the current Admin OIDC Provider",
                    "type": "SupportedScopesView"
                }
            ],
            "path": "/auth/oidc/scopes"
        },
        {
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteAdminTokenProviderCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Resets the Admin Token Provider configuration to default values",
                    "type": "void"
                },
                {
                    "method": "GET",
                    "nickname": "getAdminTokenProviderCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the Admin Token Provider configuration",
                    "type": "AdminTokenProviderView"
                },
                {
                    "method": "PUT",
                    "nickname": "updateAdminTokenProviderCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Admin Token Provider configuration",
                            "name": "AdminTokenProvider",
                            "paramType": "body",
                            "required": true,
                            "type": "AdminTokenProviderView"
                        }
                    ],
                    "summary": "Update the Admin Token Provider configuration",
                    "type": "AdminTokenProviderView"
                }
            ],
            "path": "/auth/tokenProvider"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getAdminTokenProviderMetadataCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the Admin Token Provider metadata",
                    "type": "OIDCProviderMetadata"
                }
            ],
            "path": "/auth/tokenProvider/metadata"
        },
        {
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteAdminBasicWebSessionCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Resets the Admin Web Session configuration to default values",
                    "type": "void"
                },
                {
                    "method": "GET",
                    "nickname": "getAdminBasicWebSessionCommand",
                    "notes": "",
                    "parameters": [],
                    "summary": "Get the admin web session configuration",
                    "type": "AdminBasicWebSessionView"
                },
                {
                    "method": "PUT",
                    "nickname": "updateAdminBasicWebSessionCommand",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "admin web session configuration to update",
                            "name": "AdminWebSession",
                            "paramType": "body",
                            "required": true,
                            "type": "AdminBasicWebSessionView"
                        }
                    ],
                    "summary": "Update the admin web session configuration",
                    "type": "AdminBasicWebSessionView"
                }
            ],
            "path": "/auth/webSession"
        }
    ],
    "basePath": "https://localhost:9000/pa-admin-api/v3",
    "models": {
        "AdminBasicWebSessionView": {
            "description": "An admin basic web session.",
            "id": "AdminBasicWebSessionView",
            "properties": {
                "audience": {
                    "description": "Enter a unique identifier between 1 and 32 characters that defines who the PA Admin Token is applicable to.",
                    "type": "string"
                },
                "cookieDomain": {
                    "description": "The domain where the cookie is stored--for example, corp.yourcompany.com.",
                    "type": "string"
                },
                "cookieType": {
                    "$ref": "WebSessionCookieType",
                    "description": "Specify an Encrypted JWT or a Signed JWT web session cookie.",
                    "enum": [
                        "Encrypted",
                        "Signed"
                    ]
                },
                "expirationWarningInMinutes": {
                    "description": "The time to have the UI display a warning before the session expires.",
                    "format": "int32",
                    "type": "integer"
                },
                "idleTimeoutInMinutes": {
                    "description": "The length of time you want the PingAccess Admin Token to remain active when no activity is detected.",
                    "format": "int32",
                    "type": "integer"
                },
                "sessionPollIntervalInSeconds": {
                    "description": "The interval between UI polling for session validity.",
                    "format": "int32",
                    "type": "integer"
                },
                "sessionTimeoutInMinutes": {
                    "description": "The length of time you want the PA Admin Token to remain active. Once the PA Admin Token expires, an authenticated user must re-authenticate.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "audience",
                "cookieType",
                "expirationWarningInMinutes",
                "idleTimeoutInMinutes",
                "sessionPollIntervalInSeconds",
                "sessionTimeoutInMinutes"
            ]
        },
        "AdminTokenProviderView": {
            "description": "An Admin Token Provider.",
            "id": "AdminTokenProviderView",
            "properties": {
                "description": {
                    "description": "The description of the Admin Token Provider.",
                    "type": "string"
                },
                "issuer": {
                    "description": "The issuer url of the Admin Token Provider.",
                    "type": "string"
                },
                "sslCiphers": {
                    "description": "Array of SSL ciphers to use for HTTPS requests. Empty to use all available ciphers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sslProtocols": {
                    "description": "Array of SSL protocolsto use for HTTPS requests. Empty to use all available protocols.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "trustedCertificateGroupId": {
                    "description": "The group of certificates to use when authenticating to the Admin Token Provider.",
                    "format": "int32",
                    "type": "integer"
                },
                "useProxy": {
                    "description": "True if a proxy should be used for HTTPS requests.",
                    "type": "boolean"
                }
            },
            "required": [
                "issuer",
                "sslCiphers",
                "sslProtocols"
            ]
        },
        "AdminWebSessionOidcConfigurationView": {
            "description": "An admin web session OIDC configuration.",
            "id": "AdminWebSessionOidcConfigurationView",
            "properties": {
                "cacheUserAttributes": {
                    "description": "Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is encoded and stored in the session cookie.",
                    "type": "boolean"
                },
                "clientCredentials": {
                    "$ref": "OAuthClientCredentialsView",
                    "description": "Specify the client credentials."
                },
                "enableRefreshUser": {
                    "description": "Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.",
                    "type": "boolean"
                },
                "oidcLoginType": {
                    "$ref": "OidcLoginType",
                    "description": "The web session token type.",
                    "enum": [
                        "Code",
                        "POST",
                        "x_post"
                    ]
                },
                "pfsessionStateCacheInSeconds": {
                    "description": "Specify the number of seconds to cache PingFederate Session State information.",
                    "format": "int32",
                    "type": "integer"
                },
                "pkceChallengeType": {
                    "$ref": "PkceChallengeTypeView",
                    "description": "(sortable) Specify the code_challenge_method to use for PKCE during the Code login flow. OFF signifies to not use PKCE.",
                    "enum": [
                        "SHA256",
                        "OFF"
                    ]
                },
                "refreshUserInfoClaimsInterval": {
                    "description": "Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.",
                    "format": "int32",
                    "type": "integer"
                },
                "scopes": {
                    "description": "The list of scopes. The openid scope is implied and does not need to be specified in this list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sendRequestedUrlToProvider": {
                    "description": "Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.",
                    "type": "boolean"
                },
                "validateSessionIsAlive": {
                    "description": "Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.",
                    "type": "boolean"
                }
            },
            "required": [
                "clientCredentials"
            ]
        },
        "AttributeView": {
            "description": "A name-value pair of user attributes.",
            "id": "AttributeView",
            "properties": {
                "attributeName": {
                    "description": "The name of the user attribute.",
                    "type": "string"
                },
                "attributeValue": {
                    "description": "The value of the user attribute.",
                    "type": "string"
                }
            },
            "required": [
                "attributeName",
                "attributeValue"
            ]
        },
        "BasicAuthConfigView": {
            "description": "A basic authentication configuration.",
            "id": "BasicAuthConfigView",
            "properties": {
                "enabled": {
                    "description": "This field is true if basic authentication to the Administrative API is enabled.",
                    "type": "boolean"
                }
            }
        },
        "BasicConfig": {
            "description": "A basic authentication configuration.",
            "id": "BasicConfig",
            "properties": {
                "enabled": {
                    "description": "This field is true if basic authentication to the Administrative API is enabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "enabled"
            ]
        },
        "EmbeddableAccessTokenValidatorView": {
            "description": "An Embeddable Access Token Validator configuration.",
            "id": "EmbeddableAccessTokenValidatorView",
            "properties": {
                "className": {
                    "description": "The access token validator's class name.",
                    "type": "string"
                },
                "configuration": {
                    "$ref": "Map[string,java.lang.Object]",
                    "description": "The access token validator's configuration data."
                }
            },
            "required": [
                "className",
                "configuration"
            ]
        },
        "HiddenFieldView": {
            "description": "A hidden field.",
            "id": "HiddenFieldView",
            "properties": {
                "encryptedValue": {
                    "description": "The encrypted value of the field, as originally returned by the API.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of the field. This field takes precedence over the encryptedValue field, if both are specified.",
                    "type": "string"
                }
            }
        },
        "OAuthClientCredentialsView": {
            "description": "OAuth client credentials.",
            "id": "OAuthClientCredentialsView",
            "properties": {
                "clientId": {
                    "description": "Specify the client ID.",
                    "type": "string"
                },
                "clientSecret": {
                    "$ref": "HiddenFieldView",
                    "description": "Specify the client secret."
                },
                "credentialsType": {
                    "$ref": "CredentialsType",
                    "description": "Specify the credential type.",
                    "enum": [
                        "SECRET",
                        "CERTIFICATE",
                        "PRIVATE_KEY_JWT"
                    ]
                },
                "keyPairId": {
                    "description": "Specify the ID of a key pair to use for mutual TLS.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "clientId"
            ]
        },
        "OAuthConfigView": {
            "description": "An OAuth authentication configuration.",
            "id": "OAuthConfigView",
            "properties": {
                "accessTokenValidator": {
                    "$ref": "EmbeddableAccessTokenValidatorView",
                    "description": "Access Token Validator configuration if the OAuth token validation should occur locally rather than using token introspection."
                },
                "clientCredentials": {
                    "$ref": "OAuthClientCredentialsView",
                    "description": "Specify the client credentials. This field is ignored when the accessTokenValidator is configured."
                },
                "clientId": {
                    "description": "The client_id of the OAuth client used for validating OAuth access tokens. (DEPRECATED - to be removed in a future release; please use 'clientCredentials' instead)",
                    "type": "string"
                },
                "clientSecret": {
                    "$ref": "HiddenFieldView",
                    "description": "The client secret of the OAuth client used for validating OAuth access tokens. (DEPRECATED - to be removed in a future release; please use 'clientCredentials' instead)"
                },
                "enabled": {
                    "description": "This field is true if OAuth authentication to the Administrative API is enabled.",
                    "type": "boolean"
                },
                "roleMapping": {
                    "$ref": "RoleMappingConfigurationView",
                    "description": "The configuration for mapping user attributes to roles."
                },
                "scope": {
                    "description": "The scope required to successfully access the API--for example, admin.",
                    "type": "string"
                },
                "subjectAttributeName": {
                    "description": "The attribute you want to use from the OAuth access token as the subject for auditing purposes. At runtime, the attribute's value is used as the subject field in audit log entries for the Admin API. This field is ignored when the accessTokenValidator is configured.",
                    "type": "string"
                }
            },
            "required": [
                "scope"
            ]
        },
        "OIDCProviderMetadata": {
            "description": "The OpenID Connect provider's metadata.",
            "id": "OIDCProviderMetadata",
            "properties": {
                "authorization_endpoint": {
                    "description": "URL of the OpenID Connect provider's authorization endpoint.",
                    "type": "string"
                },
                "backchannel_authentication_endpoint": {
                    "description": "the endpoint used to initiate an out-of-band authentication.",
                    "type": "string"
                },
                "claim_types_supported": {
                    "description": "JSON array containing a list of the claim types that the OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "claims_parameter_supported": {
                    "description": "boolean value specifying whether the OpenID Connect provider supports use of the claims parameter, with true indicating support.",
                    "type": "boolean"
                },
                "claims_supported": {
                    "description": "JSON array containing a list of the claim names of the claims that the OpenID Connect provider MAY be able to supply values for.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "code_challenge_methods_supported": {
                    "description": "Proof Key for Code Exchange (PKCE) code challenge methods supported by this OpenID Connect provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "end_session_endpoint": {
                    "description": "URL at the OpenID Connect provider to which a relying party can perform a redirect to request that the end-user be logged out at the OpenID Connect provider.",
                    "type": "string"
                },
                "grant_types_supported": {
                    "description": "JSON array containing a list of the OAuth 2.0 grant type values that this OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id_token_signing_alg_values_supported": {
                    "description": "JSON array containing a list of the JWS signing algorithms supported by the OpenID Connect provider for the id token to encode the claims in a JWT.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "introspection_endpoint": {
                    "description": "URL of the OpenID Connect provider's OAuth 2.0 introspection endpoint.",
                    "type": "string"
                },
                "issuer": {
                    "description": "OpenID Connect provider's issuer identifier URL.",
                    "type": "string"
                },
                "jwks_uri": {
                    "description": "URL of the OpenID Connect provider's JWK Set document.",
                    "type": "string"
                },
                "mtls_endpoint_aliases": {
                    "$ref": "Map[string,string]",
                    "description": "a map of alternative authorization server endpoints. The key is an authorization server endpoint, and the value is a preferred URL for the endpoint."
                },
                "ping_end_session_endpoint": {
                    "description": "PingFederate logout endpoint. (Not applicable if PingFederate is not the OpenID Connect provider)",
                    "type": "string"
                },
                "ping_revoked_sris_endpoint": {
                    "description": "PingFederate session revocation endpoint. (Not applicable if PingFederate is not the OpenID Connect provider)",
                    "type": "string"
                },
                "request_object_signing_alg_values_supported": {
                    "description": "JSON array containing a list of the JWS signing algorithms supported by the OpenID Connect provider for request objects.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "request_parameter_supported": {
                    "description": "boolean value specifying whether the OpenID Connect provider supports use of the request parameter, with true indicating support.",
                    "type": "boolean"
                },
                "request_uri_parameter_supported": {
                    "description": "boolean value specifying whether the OpenID Connect provider supports use of the request_uri parameter, with true indicating support.",
                    "type": "boolean"
                },
                "response_modes_supported": {
                    "description": "JSON array containing a list of the OAuth 2.0 \"response_mode\" values that this OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "response_types_supported": {
                    "description": "JSON array containing a list of the OAuth 2.0 \"response_type\" values that this OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "revocation_endpoint": {
                    "description": "URL of the OpenID Connect provider's OAuth 2.0 revocation endpoint.",
                    "type": "string"
                },
                "scopes_supported": {
                    "description": "JSON array containing a list of the OAuth 2.0 \"scope\" values that this OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject_types_supported": {
                    "description": "JSON array containing a list of the Subject Identifier types that this OpenID Connect provider supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "token_endpoint": {
                    "description": "URL of the OpenID Connect provider's token endpoint.",
                    "type": "string"
                },
                "token_endpoint_auth_methods_supported": {
                    "description": "JSON array containing a list of client authentication methods supported by this token endpoint.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "token_endpoint_auth_signing_alg_values_supported": {
                    "description": "JSON array containing a list of client authentication signing algorithms supported by this token endpoint.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "userinfo_endpoint": {
                    "description": "URL of the OpenID Connect provider's userInfo endpoint.",
                    "type": "string"
                },
                "userinfo_signing_alg_values_supported": {
                    "description": "JSON array containing a list of the JWS signing algorithms supported by the userInfo endpoint to encode the claims in a JWT.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "authorization_endpoint",
                "backchannel_authentication_endpoint",
                "claim_types_supported",
                "claims_parameter_supported",
                "claims_supported",
                "code_challenge_methods_supported",
                "end_session_endpoint",
                "grant_types_supported",
                "id_token_signing_alg_values_supported",
                "introspection_endpoint",
                "issuer",
                "jwks_uri",
                "mtls_endpoint_aliases",
                "ping_end_session_endpoint",
                "ping_revoked_sris_endpoint",
                "request_object_signing_alg_values_supported",
                "request_parameter_supported",
                "request_uri_parameter_supported",
                "response_modes_supported",
                "response_types_supported",
                "revocation_endpoint",
                "scopes_supported",
                "subject_types_supported",
                "token_endpoint",
                "token_endpoint_auth_methods_supported",
                "token_endpoint_auth_signing_alg_values_supported",
                "userinfo_endpoint",
                "userinfo_signing_alg_values_supported"
            ]
        },
        "OidcConfigView": {
            "description": "An OIDC authentication configuration.",
            "id": "OidcConfigView",
            "properties": {
                "authnReqListId": {
                    "description": "The ID of the authentication requirement list for Administrative SSO login to PingAccess.",
                    "format": "int32",
                    "type": "integer"
                },
                "enabled": {
                    "description": "This field is true to enable Administrator SSO Authentication.",
                    "type": "boolean"
                },
                "oidcConfiguration": {
                    "$ref": "AdminWebSessionOidcConfigurationView",
                    "description": "The OIDC configuration for the PA admin web session."
                },
                "roleMapping": {
                    "$ref": "RoleMappingConfigurationView",
                    "description": "The configuration for mapping user attributes to roles."
                },
                "useSlo": {
                    "description": "Enable if OIDC single log out should be used on the /pa/oidc/logout for admin console.",
                    "type": "boolean"
                },
                "usernameAttributeName": {
                    "description": "Attribute to display as the logged in user. If not set, the sub attribute will be used.",
                    "type": "string"
                }
            },
            "required": [
                "oidcConfiguration"
            ]
        },
        "OptionalAttributeMappingView": {
            "description": "A set of user attributes that define an optional role mapping.",
            "id": "OptionalAttributeMappingView",
            "properties": {
                "attributes": {
                    "description": "The attributes that define the role.",
                    "items": {
                        "$ref": "AttributeView"
                    },
                    "type": "array"
                },
                "enabled": {
                    "description": "Set to true to enable the role in the system.",
                    "type": "boolean"
                }
            },
            "required": [
                "attributes"
            ]
        },
        "RequiredAttributeMappingView": {
            "description": "A set of user attributes that define a mandatory role mapping.",
            "id": "RequiredAttributeMappingView",
            "properties": {
                "attributes": {
                    "description": "The attributes that define the role.",
                    "items": {
                        "$ref": "AttributeView"
                    },
                    "type": "array"
                }
            },
            "required": [
                "attributes"
            ]
        },
        "RoleMappingConfigurationView": {
            "description": "Configuration for mapping user attributes to roles.",
            "id": "RoleMappingConfigurationView",
            "properties": {
                "administrator": {
                    "$ref": "RequiredAttributeMappingView",
                    "description": "The user attribute configuration for determining if a user has an administrator role."
                },
                "auditor": {
                    "$ref": "OptionalAttributeMappingView",
                    "description": "The user attribute configuration for determining if a user has an auditor role."
                },
                "enabled": {
                    "description": "Set to true to enable mapping of user attributes to roles.",
                    "type": "boolean"
                },
                "platformAdmin": {
                    "$ref": "OptionalAttributeMappingView",
                    "description": "The user attribute configuration for determining if a user has an platform administrator role."
                }
            }
        },
        "SupportedScopesView": {
            "description": "A set of scopes supported by the OIDC Provider.",
            "id": "SupportedScopesView",
            "properties": {
                "clientId": {
                    "description": "The ID of the client that the scopes are associated with. If not specified, the list of scopes represents all scopes supported by the provider.",
                    "type": "string"
                },
                "scopes": {
                    "description": "The list of supported scopes (excluding 'openid').",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "clientId",
                "scopes"
            ]
        }
    },
    "resourcePath": "/auth",
    "swaggerVersion": "1.2"
}